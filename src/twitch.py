import logging
import m3u8

from random import randrange

from src.api import Api


class Twitch:
    """
    Functions and processes for interacting with the Twitch API.
    """
    def __init__(self, config):
        """Class constructor.

        :param config: configuration dict generated by Config
        """

        self.log = logging.getLogger('twitch-archive')

        self.Api = Api(config['pushbullet_key'])

        self.Config = config

    def get_api(self, api_path):
        """Retrieves information from the Twitch API.

        :param api_path: twitch api endpoint to send request to
        :return: requests response json
        """
        _h = {'Authorization': 'Bearer ' + self.Config['oauth_token'], 'Client-Id': self.Config['client_id']}
        _r = self.Api.get_request('https://api.twitch.tv/helix/' + api_path, h=_h)

        return _r.json()

    def generate_oauth_token(self):
        """Generates an OAuth token from the provided client ID and secret.

        :return: oauth token
        """
        _d = {'client_id': self.Config['client_id'], 'client_secret': self.Config['client_secret'],
              'grant_type': 'client_credentials'}
        _t = self.Api.post_request('https://id.twitch.tv/oauth2/token', d=_d).json()['access_token']

        return _t

    def validate_oauth_token(self):
        """Validates a specified OAuth token with Twitch.

        :return: token expiration date
        """
        self.log.debug('Verifying OAuth token.')
        _h = {'Authorization': 'Bearer ' + self.Config['oauth_token']}
        _r = self.Api.get_request('https://id.twitch.tv/oauth2/validate', h=_h)
        self.log.info('OAuth token verified successfully. Expiring in ' + str(_r.json()['expires_in']))

        return _r.json()['expires_in']

    def get_playback_access_token(self, vod_id):
        """Gets a playback access token for a specified vod.

        :param vod_id: id of vod to retrieve token for
        :return: playback access token
        """
        # only accepts the default client ID for non-authenticated clients
        _h = {'Client-Id': 'kimne78kx3ncx6brgo4mv6wki5h1ko'} 
        _q = """
        {{
            videoPlaybackAccessToken(
                id: {vod_id},
                params: {{
                    platform: "web",
                    playerBackend: "mediaplayer",
                    playerType: "site"
                }}
            ) {{
                signature
                value
            }}
        }}
        """.format(vod_id=vod_id)
        _r = self.Api.post_request('https://gql.twitch.tv/gql', j={'query': _q}, h=_h)

        return _r.json()['data']['videoPlaybackAccessToken']

    def get_vod_index(self, vod_id):
        """Retrieves an index of m3u8 streams.

        :param vod_id: id of vod to retrieve index of
        :return: url of m3u8 playlist
        """
        access_token = self.get_playback_access_token(vod_id)

        _p = {
            'player': 'twitchweb',
            'nauth': access_token['value'],
            'nauthsig': access_token['signature'],
            'allow_source': 'true',
            'playlist_include_framerate': 'true',
            'p': randrange(1000000, 9999999)
        }
        _r = self.Api.get_request(f'https://usher.ttvnw.net/vod/{vod_id}.m3u8', p=_p)

        _index = m3u8.loads(_r.text)
        # extract source (chunked) playlist uri from m3u8 data
        for _p in _index.playlists:
            if _p.media[0].group_id == 'chunked':
                return _p.uri
